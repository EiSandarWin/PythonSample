>>> def concat(*args, sep="/"):
...     return sep.join(args)
...
>>> concat("earth", "mars", "venus")
'earth/mars/venus'
>>> concat("earth", "mars", "venus", sep=".")
'earth.mars.venus'
>>> concat("earth", "mars", "venus", sep="&")
'earth&mars&venus'
>>> concat ("earth", "mars", "venus", sep="%")
'earth%mars%venus'
>>> concat ("earth", "mars", "venus", sep="#")
'earth#mars#venus'
>>> concat ("earth", "mars", "venus", sep="@")
'earth@mars@venus'

list(range(3, 6))            # normal call with separate arguments
[3, 4, 5]
>>> args = [3, 6]
>>> list(range(*args))            # call with arguments unpacked from a list
[3, 4, 5]


def parrot(voltage, state='a stiff', action='voom'):
    print("-- This parrot wouldn't", action, end=' ')
    print("if you put", voltage, "volts through it.", end=' ')
    print("E's", state, "!")

d = {"voltage": "four million", "state": "bleedin' demised", "action": "VOOM"}
parrot(**d)

This parrot wouldn't VOOM if you put four million volts through it. E's bleedin' demised 



def sparrow(voltage, state='a stiff', action='died'):
    print("-- This sparrow wouldn't", action, end=' ')
    print("if you put", voltage, "volts through it.", end=' ')
    print("E's", state, "!")

d = {"voltage": "1000KV", "state": "Sparrow will deid", "action": "died"}
sparrow(**d)


def make_incrementor(n):
    return lambda x: x + n

f = make_incrementor(42)
f(0)

f(1)

>>> pairs = [(1, 'one'), (2, 'two'), (3, 'three'), (4, 'four')]
>>> pairs.sort(key=lambda pair: pair[1])
>>> pairs
[(4, 'four'), (1, 'one'), (3, 'three'), (2, 'two')]
